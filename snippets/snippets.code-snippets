{
    "Immediately Invoked Function Expression ": {
        "prefix": "a:iife",
        "description": "This is an immediately invoked function expression",
        "isFileTemplate": false,
        "body": "{(()=> {\n${1}\n})()}"
    },
    "Immediately Invoked Generator Expression": {
        "body": [
            "{(function* () {",
            "for(let ${0:item} of ${0:item}s) {\n${1}\n}",
            "})()}"
        ],
        "prefix": "a:iige",
        "description": "This is an generator expression"
    },
    "Astro Base": {
        "prefix": "a:base",
        "description": "This is a basic scaffold for a component in Astro",
        "isFileTemplate": true,
        "body": [
            "---\n${3}\n---",
            "<${1:div}>\n",
            "</div>\n",
            "<style>\n${2}\n</style>",
        ],
    },
    "Astro Client Script Base": {
        "prefix": "a:cbase",
        "description": "Astro Single File Component w Client Script",
        "isFileTemplate": true,
        "body": [
            "<${0:div}>\n</div>\n",
            "<style>\n${1}\n</style>\n",
            "<script>\n</script>",
        ],
    },
    "Header Main Footer Component ": {
        "prefix": "a:base-hmf",
        "description": "This is a header footer main snippet",
        "isFileTemplate": true,
        "body": [
            "---\n${5}\n---",
            "<!DOCTYPE html>",
            "<html lang='en'>",
            "<head>",
            "<meta charset='UTF-8' />",
            "<meta http-equiv='X-UA:Compatible' content='IE=edge' />",
            "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",
            "<title>Document</title>",
            "</head>\n",
            "<body>",
            "<header>\n${1}\n</header>\n",
            "<main>\n${2}\n</main>\n",
            "<footer>\n${3}\n</footer>\n",
            "</body>",
            "</html>",
            "<style>\n${4}\n</style>",
        ],
    },
    "Fragment Set HTML": {
        "prefix": "a:frag--html",
        "description": "This is a fragment with set html",
        "isFileTemplate": false,
        "body": "<Fragment set:html={${0}} />",
    },
    "Fragment Slot Name": {
        "prefix": "a:frag--slot",
        "description": "This is a fragment with a slot name in it",
        "isFileTemplate": false,
        "body": "<Fragment slot='${1}'>\n${2}\n</Fragment>",
    },
    "Pre-rendered Page": {
        "prefix": "a:base-prpg",
        "description": "This is a pre-rendered page snippet",
        "isFileTemplate": false,
        "body": [
            "---\nexport const prerender = true\n---",
            "<${1:div}>\n</div>",
            "<style>\n${2}\n</style>",
        ],
    },
    "Pre rendered Page with getStaticPaths": {
        "prefix": "a:base-prpg--gsp",
        "description": "This is a pre-rendered page with getStaticPaths Setup",
        "isFileTemplate": true,
        "body": [
            "---",
            "import { InferGetStaticParamsType, InferGetStaticPropsType } from astro/types\n",
            "export const prerender = true",
            "export const getStaticPaths = async () => {",
            "${2}",
            "return [",
            "{",
            "params: {},",
            "props:{},",
            "}",
            "]",
            "}",
            "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
            "const {${3}} = Astro.props ",
            "---",
            "<${1:div}>\n</div>",
        ],
    },
    "Page with getStaticPaths": {
        "prefix": "a:base-gsp",
        "description": "This is a page snippet with getStaticPaths",
        "isFileTemplate": false,
        "body": [
            "---",
            "import { InferGetStaticParamsType, InferGetStaticPropsType } from 'astro/types'\n",
            "export const getStaticPaths = async ({}) => {",
            "${2}",
            "return [",
            "{",
            "params: {},",
            "props:{},",
            "}",
            "]",
            "}",
            "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
            "const {${3}} = Astro.props ",
            "const {${4}} = Astro.params",
            "---",
            "<${1:div}>\n</div>\n"
        ],
    },
    "Astro Component": {
        "prefix": "a:base-cmp",
        "description": "This is a basic Astro component",
        "isFileTemplate": true,
        "body": [
            "---",
            "type Props = {\n${2}\n}",
            "const {${3}} = Astro.props",
            "---",
            "<${1:div}>\n</div>",
            "<style>\n${4}\n</style>",
        ],
    },
    "Astro Component with Client Script": {
        "prefix": "a:base-cmp--csc",
        "description": "This is an Astro component with a client script",
        "isFileTemplate": true,
        "body": [
            "---",
            "type Props = {\n${3}\n}",
            "const {${4}} = Astro.props",
            "---",
            "<${2:div}>\n</${2:div}>",
            "<style>\n${1}\n</style>",
            "<script>${5}</script>",
            ""
        ],
    },
    "Layout Page": {
        "prefix": "a:base-lpg",
        "description": "This a page with layout scaffold",
        "isFileTemplate": true,
        "body": [
            "---${4}---",
            "<${1:Layout}>\n${2}\n</${1:Layout}>",
            "<style>\n${3}\n</style>",
        ],
    },
    "Layout Page with Header and Footer slot": {
        "prefix": "a:base-lpg--hmf",
        "description": "The is a scaffold for a Layout Page with a header and footer slot and main as default slot",
        "isFileTemplate": false,
        "body": [
            "---\n${5}\n---",
            "<${1:Layout}>",
            "<slot name='header'>\n${2}\n</slot>",
            "${3}",
            "<slot name='footer'>\n${4}\n</slot>",
            "</${1:Layout}>"
        ],
    },
    "Content Collections Page with getStaticPaths": {
        "prefix": "a:base-gsp--gc",
        "description": "Scaffold for Get Collections With getStaticPaths",
        "isFileTemplate": true,
        "body": [
            "---",
            "import { getCollection, CollectionEntry } from 'astro:content';",
            "import { InferGetStaticParamsType, InferGetStaticPropsType } from 'astro/types'",
            "export async function getStaticPaths() {",
            "const ${2:docs} = await getCollection('${1:docs}');",
            "return ${2:docs}.map(entry => ({",
            "params: { slug: entry.slug }, props: { entry }",
            "}));",
            "}",
            "type Params = InferGetStaticParamsType<typeof getStaticPaths>",
            "type Props = InferGetStaticPropsType<typeof getStaticPaths>",
            "const {${3}} = Astro.props ",
            "const {${4}} = Astro.params",
            "const { Content } = await entry.render()",
            "---",
            "<h1>{entry.data.title}</h1>",
            "<article>\n<Content />\n</article>",
            "<style>\n${3}\n</style>",
        ],
    },
    "Map Expression ": {
        "prefix": "a:map",
        "description": "This is a simple map expression for Astro",
        "isFileTemplate": false,
        "body": [
            "{ ${1:item}s.map((${1:item}) => ${2:item} }) }",
        ],
    },
    "Map Expression Using a Block": {
        "prefix": "a:map--anfn",
        "description": "This is a map expression for Astro using a anonymous function",
        "isFileTemplate": false,
        "body": [
            "{",
            "${1:item}s.map((${1:item}) =>{",
            " return ${2:item}",
            "})",
            "}",
        ],
    },
    "Ternary Expression": {
        "prefix": "a:tern",
        "description": "A ternary expression scaffold",
        "isFileTemplate": false,
        "body": [
            "{ ${1:expression} ? ${2} : ${3:null} }",
        ],
    },
    "Fragment Slot with Function Expression": {
        "prefix": "a:frag--slot--anfn",
        "description": "A fragment slot with a function to return HTML",
        "isFileTemplate": false,
        "body": [
            "<${2:div} slot=${1}>",
            "{\n()=> (${3}\n)}",
            "</div>",
        ],
    },
}